#version 330 core

in vec4 vs_color;
in vec3 vs_frag;
in vec3 vs_normal;
in vec2 vs_texcoord;

uniform vec3 Camera;
uniform mat4 M;
uniform mat4 V;
uniform bool UseTex;
uniform float Mod;
uniform sampler2D Texture;

out vec4 frag_color;

struct Material {
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
    float shininess;
};

struct Light {
    vec3 position;

    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

uniform Material material;
uniform Light light[2];

void main()
{
	// lighting variables
	vec3 lightPos = vec3(0.0, 10.0, 10.0); // world space
	vec3 lightColor = vec3(0.9, 0.9, 0.9);
	float diffuseIntensity = 2.8;
	float specularIntensity = 0.7;
	float ambientIntensity = 0.10;

	// We only care about normalized vectors (for direction)
	vec3 norm = normalize(vs_normal);

	// We are in world space (W - W = W)
	// [.] -----> (camera)
	vec3 eye = normalize(Camera - vs_frag);

	// [.] -----> (light)
	vec3 fragToLight = normalize(lightPos - vs_frag);

	// ambient
	vec3 vertexColor = vs_color.rgb;
	vec3 diffuseColor = UseTex ? texture(Texture, vs_texcoord).rgb : vertexColor;
	vec3 ambientColor = diffuseColor;
	vec3 ambient = ambientColor * ambientIntensity;

	// diffuse
	float diff = clamp(dot(fragToLight, norm), 0.0, 1.0);
	vec3 diffuse = diffuseIntensity * diff * lightColor;

	// specular
	vec3 reflection = reflect(-fragToLight, norm);
	float spec = pow(clamp(dot(eye, reflection), 0.0, 1.0), 64);

	vec3 specular = specularIntensity * spec * lightColor;

	vec3 color = (ambient + diffuse + specular) * diffuseColor;

	// Uncomment if you want normal shading w.r.t camera
	//vec4 normCamera = V * vec4(norm, 0.0);
	//frag_color = vec4(normCamera.rgb, 1.0);

	vec3 lc = mix(vec3(0.0, 0.5, 0.5), vec3(0.0, 1.0, 1.0), Mod);

	frag_color = vec4(lc, 1.0);
	//frag_color = vec4(1.0, 0.0,0.0, 1.0);
	//frag_color = vec4(vs_color.rgb, 1.0);
	//frag_color = vec4(vec3(1.0, 0.0, 0.0), 1.0);
}
